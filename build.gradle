plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    id("com.google.gms.google-services")
    id("com.google.firebase.crashlytics")
    id("kotlin-kapt")
    id("com.google.dagger.hilt.android")
}

android {
    namespace 'tamhoang.ldpro4'
    compileSdk 34

    defaultConfig {
        applicationId "tamhoang.ldpro4"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"
        ndk.abiFilters 'armeabi-v7a', 'arm64-v8a'
        setProperty("archivesBaseName", "Win6868" + "_v" + versionName + "_code" + versionCode)

    }
    signingConfigs {
        release {
            storeFile file('/meta/keystore.jks')
            storePassword 'minhkhoi2020'
            keyAlias 'totopay'
            keyPassword 'minhkhoi2020'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            buildConfigField "String", "HOST", "\"https://admin.ldpromax.com/api/subcription\""

        }
        debug {
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "String", "HOST", "\"https://admin.ldpromax.com/api/subcription\""

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    kapt {
        correctErrorTypes = true
    }
    android.applicationVariants.all { variant ->
        def namePrefix = "Win6868"
        if (getName().startsWith("pro")) {
            namePrefix = "Win6868"
        }
        def apkName = namePrefix + "_v${variant.versionName}"
        variant.outputs.all {
            outputFileName = apkName + ".apk"
        }

        if (!getName().contains("debug")) {
            variant.outputs.each { output ->
                if (variant.getBuildType().isMinifyEnabled()) {
                    variant.assemble.doLast {
                        copy {
                            from variant.mappingFile
                            into output.outputFile.parent
                            rename { String fileName ->
                                apkName + "_mapping.txt"
                            }
                        }
                    }
                }
            }
        }
    }
    lint {
        baseline = file("lint-baseline.xml")
    }
    buildFeatures {
        buildConfig = true
    }
}

dependencies {
    implementation(project(":tdlib"))
    implementation(files("/libs/swipeback-1.0.2.aar"))
//    implementation(files("/libs/classes-dex2jar.jar"))
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.fragment.ktx)
    implementation(libs.material)
    implementation(libs.volley)
    implementation(libs.zip4j)
    implementation(libs.jsoup)
    implementation(libs.okhttp)
    implementation(libs.androidx.multidex)

    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.analytics)
    implementation(libs.firebase.crashlytics)
    implementation(libs.firebase.config)

    //hilt
    implementation(libs.hilt.android)
    kapt(libs.hilt.android.compiler)

    //room
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
    annotationProcessor(libs.room.compiler)
    kapt(libs.room.compiler)

    // ViewModel and LiveData
    implementation(libs.androidx.lifecycle.livedata.ktx)
    implementation(libs.androidx.lifecycle.viewmodel.ktx)

    implementation(libs.utilcode)
}